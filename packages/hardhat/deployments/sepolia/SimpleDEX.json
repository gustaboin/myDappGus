{
  "address": "0x37a03EC7d9e3a365D1a2443107207EEE1fD6c1b6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "LiquidityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "LiquidityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "TokenSwapped",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountAIn",
          "type": "uint256"
        }
      ],
      "name": "swapAforB",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountBIn",
          "type": "uint256"
        }
      ],
      "name": "swapBforA",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenA",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenB",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x760719d52dbbeec4437ad1513203a0a30b6a8a5afc260187109fcf30c9818849",
  "receipt": {
    "to": null,
    "from": "0xf1D7ec54cb3CD1afbE1943A87BaB4D6ba9550D80",
    "contractAddress": "0x37a03EC7d9e3a365D1a2443107207EEE1fD6c1b6",
    "transactionIndex": 42,
    "gasUsed": "905338",
    "logsBloom": "0x
    "blockHash": "0x6fd394541ba66f4cdee4854b86d53d39b2ad70aacc70bd2022452ebfae076094",
    "transactionHash": "0x760719d52dbbeec4437ad1513203a0a30b6a8a5afc260187109fcf30c9818849",
    "logs": [
      {
        "transactionIndex": 42,
        "blockNumber": 7286413,
        "transactionHash": "0x760719d52dbbeec4437ad1513203a0a30b6a8a5afc260187109fcf30c9818849",
        "address": "0x37a03EC7d9e3a365D1a2443107207EEE1fD6c1b6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f1d7ec54cb3cd1afbe1943a87bab4d6ba9550d80"
        ],
        "data": "0x",
        "logIndex": 337,
        "blockHash": "0x6fd394541ba66f4cdee4854b86d53d39b2ad70aacc70bd2022452ebfae076094"
      }
    ],
    "blockNumber": 7286413,
    "cumulativeGasUsed": "11667745",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0a4BBb4cd99828AB1BC3Bc5d7133123E1c837dE7",
    "0x56FDD8819810Cc188aa949752df6e2B10A2B12f5"
  ],
  "numDeployments": 1,
  "solcInputHash": "2ff40900d1bb35c8ad3ab7cc3759d98e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"TokenSwapped\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountAIn\",\"type\":\"uint256\"}],\"name\":\"swapAforB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountBIn\",\"type\":\"uint256\"}],\"name\":\"swapBforA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenA\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenB\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"[Gus]\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"TokenSwapped(address,uint256,uint256)\":{\"params\":{\"user\":\"/// @param amountIn /// @param amountOut\"}}},\"kind\":\"dev\",\"methods\":{\"addLiquidity(uint256,uint256)\":{\"details\":\"Only callable by the owner\",\"params\":{\"amountA\":\"/// @param amountB\"}},\"constructor\":{\"params\":{\"_tokenA\":\"Address of token A\",\"_tokenB\":\"Address of token B\"}},\"getPrice(address)\":{\"params\":{\"_token\":\"Address of the token to price\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeLiquidity(uint256,uint256)\":{\"params\":{\"amountA\":\"/// @param amountB\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"swapAforB(uint256)\":{\"params\":{\"amountAIn\":\"The amount of token A to swap\"}},\"swapBforA(uint256)\":{\"params\":{\"amountBIn\":\"The amount of token B to swap\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Simple Decentralized Exchange (DEX)\",\"version\":1},\"userdoc\":{\"events\":{\"LiquidityAdded(uint256,uint256)\":{\"notice\":\"Emitted when liquidity is added\"},\"LiquidityRemoved(uint256,uint256)\":{\"notice\":\"Emitted when liquidity is removed\"},\"TokenSwapped(address,uint256,uint256)\":{\"notice\":\"Emitted when a token swap occurs\"}},\"kind\":\"user\",\"methods\":{\"addLiquidity(uint256,uint256)\":{\"notice\":\"Adds liquidity to the pool\"},\"constructor\":{\"notice\":\"Initializes the DEX with two tokens\"},\"getPrice(address)\":{\"notice\":\"Gets the price of a token relative to the other\"},\"removeLiquidity(uint256,uint256)\":{\"notice\":\"Removes liquidity from the pool Only callable by the owner\"},\"swapAforB(uint256)\":{\"notice\":\"Swaps token A for token B\"},\"swapBforA(uint256)\":{\"notice\":\"Swaps token B for token A\"},\"tokenA()\":{\"notice\":\"Token A in the liquidity pool\"},\"tokenB()\":{\"notice\":\"Token B in the liquidity pool\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SimpleDex.sol\":\"SimpleDEX\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/SimpleDex.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/// @title Simple Decentralized Exchange (DEX)\\r\\n/// @author [Gus]\\r\\ncontract SimpleDEX is Ownable {\\r\\n    /// @notice Token A in the liquidity pool\\r\\n    IERC20 public tokenA;\\r\\n\\r\\n    /// @notice Token B in the liquidity pool\\r\\n    IERC20 public tokenB;\\r\\n\\r\\n    /// @notice Emitted when liquidity is added\\r\\n    event LiquidityAdded(uint256 amountA, uint256 amountB);\\r\\n\\r\\n    /// @notice Emitted when liquidity is removed\\r\\n    event LiquidityRemoved(uint256 amountA, uint256 amountB);\\r\\n\\r\\n    /// @notice Emitted when a token swap occurs\\r\\n    /// @param user  /// @param amountIn /// @param amountOut\\r\\n    event TokenSwapped(address indexed user, uint256 amountIn, uint256 amountOut);\\r\\n\\r\\n    /// @notice Initializes the DEX with two tokens\\r\\n    /// @param _tokenA Address of token A\\r\\n    /// @param _tokenB Address of token B\\r\\n    constructor(address _tokenA, address _tokenB) Ownable(msg.sender) {\\r\\n        tokenA = IERC20(_tokenA);\\r\\n        tokenB = IERC20(_tokenB);\\r\\n    }\\r\\n\\r\\n    /// @notice Adds liquidity to the pool\\r\\n    /// @dev Only callable by the owner\\r\\n    /// @param amountA     /// @param amountB\\r\\n    function addLiquidity(uint256 amountA, uint256 amountB) external onlyOwner {\\r\\n        require(amountA > 0 && amountB > 0, \\\"Amounts must be > 0\\\");\\r\\n        tokenA.transferFrom(msg.sender, address(this), amountA);\\r\\n        tokenB.transferFrom(msg.sender, address(this), amountB);\\r\\n\\r\\n        emit LiquidityAdded(amountA, amountB);\\r\\n    }\\r\\n\\r\\n    /// @notice Removes liquidity from the pool Only callable by the owner\\r\\n    /// @param amountA /// @param amountB\\r\\n    function removeLiquidity(uint256 amountA, uint256 amountB) external onlyOwner {\\r\\n        require(\\r\\n            amountA <= tokenA.balanceOf(address(this)) && amountB <= tokenB.balanceOf(address(this)),\\r\\n            \\\"Low liquidity\\\"\\r\\n        );\\r\\n\\r\\n        tokenA.transfer(msg.sender, amountA);\\r\\n        tokenB.transfer(msg.sender, amountB);\\r\\n\\r\\n        emit LiquidityRemoved(amountA, amountB);\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps token A for token B\\r\\n    /// @param amountAIn The amount of token A to swap\\r\\n    function swapAforB(uint256 amountAIn) external {\\r\\n        require(amountAIn > 0, \\\"Amount must be > 0\\\");\\r\\n\\r\\n        uint256 amountBOut = getAmountOut(amountAIn, tokenA.balanceOf(address(this)), tokenB.balanceOf(address(this)));\\r\\n\\r\\n        tokenA.transferFrom(msg.sender, address(this), amountAIn);\\r\\n        tokenB.transfer(msg.sender, amountBOut);\\r\\n\\r\\n        emit TokenSwapped(msg.sender, amountAIn, amountBOut);\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps token B for token A\\r\\n    /// @param amountBIn The amount of token B to swap\\r\\n    function swapBforA(uint256 amountBIn) external {\\r\\n        require(amountBIn > 0, \\\"Amount must be > 0\\\");\\r\\n\\r\\n        uint256 amountAOut = getAmountOut(amountBIn, tokenB.balanceOf(address(this)), tokenA.balanceOf(address(this)));\\r\\n\\r\\n        tokenB.transferFrom(msg.sender, address(this), amountBIn);\\r\\n        tokenA.transfer(msg.sender, amountAOut);\\r\\n\\r\\n        emit TokenSwapped(msg.sender, amountBIn, amountAOut);\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the price of a token relative to the other\\r\\n    /// @param _token Address of the token to price\\r\\n\\r\\n    function getPrice(address _token) external view returns (uint256) {\\r\\n        require(_token == address(tokenA) || _token == address(tokenB), \\\"Invalid token\\\");\\r\\n\\r\\n        return\\r\\n            _token == address(tokenA)\\r\\n                ? (tokenB.balanceOf(address(this)) * 1e18) / tokenA.balanceOf(address(this))\\r\\n                : (tokenA.balanceOf(address(this)) * 1e18) / tokenB.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /// @notice Calculates the output amount of a swap\\r\\n    /// @dev Implements constant product formula\\r\\n    /// @param amountIn /// @param reserveIn /// @param reserveOut /// @return The amount of output tokens\\r\\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) private pure returns (uint256) {\\r\\n        return (amountIn * reserveOut) / (reserveIn + amountIn);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc5c712b4c8328649e7456af70ac26a2a0cbd03963c2ba2bbc38e8e90d8482fa1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610f52380380610f5283398101604081905261002f916100fc565b338061005557604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61005e81610090565b50600180546001600160a01b039384166001600160a01b0319918216179091556002805492909316911617905561012f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146100f757600080fd5b919050565b6000806040838503121561010f57600080fd5b610118836100e0565b9150610126602084016100e0565b90509250929050565b610e148061013e6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80638da5cb5b116100665780638da5cb5b146101245780639cd441da146101355780639d7de6b314610148578063e4f1f70a1461015b578063f2fde38b1461016e57600080fd5b80630fc63d10146100a357806341976e09146100d35780635f64b55b146100f4578063715018a6146101075780638014a7aa14610111575b600080fd5b6001546100b6906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100e66100e1366004610cb2565b610181565b6040519081526020016100ca565b6002546100b6906001600160a01b031681565b61010f6103f6565b005b61010f61011f366004610ce2565b61040a565b6000546001600160a01b03166100b6565b61010f610143366004610cfb565b610663565b61010f610156366004610cfb565b6107eb565b61010f610169366004610ce2565b610a37565b61010f61017c366004610cb2565b610bcf565b6001546000906001600160a01b03838116911614806101ad57506002546001600160a01b038381169116145b6101ee5760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b2103a37b5b2b760991b60448201526064015b60405180910390fd5b6001546001600160a01b038381169116146102fc576002546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa15801561024b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026f9190610d1d565b6001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156102b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102db9190610d1d565b6102ed90670de0b6b3a7640000610d4c565b6102f79190610d63565b6103f0565b6001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610344573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103689190610d1d565b6002546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156103b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d49190610d1d565b6103e690670de0b6b3a7640000610d4c565b6103f09190610d63565b92915050565b6103fe610c0d565b6104086000610c3a565b565b6000811161044f5760405162461bcd60e51b81526020600482015260126024820152710416d6f756e74206d757374206265203e20360741b60448201526064016101e5565b6002546040516370a0823160e01b81523060048201526000916105349184916001600160a01b0316906370a0823190602401602060405180830381865afa15801561049e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c29190610d1d565b6001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a08231906024015b602060405180830381865afa15801561050b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052f9190610d1d565b610c8a565b6002546040516323b872dd60e01b81529192506001600160a01b0316906323b872dd9061056990339030908790600401610d85565b6020604051808303816000875af1158015610588573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ac9190610da9565b5060015460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044015b6020604051808303816000875af11580156105ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106239190610da9565b50604080518381526020810183905233917fd5a1cd88ddd329cc1ddf861a21708efa9ef3136b88e1420c21f91ef6f95ad024910160405180910390a25050565b61066b610c0d565b60008211801561067b5750600081115b6106bd5760405162461bcd60e51b81526020600482015260136024820152720416d6f756e7473206d757374206265203e203606c1b60448201526064016101e5565b6001546040516323b872dd60e01b81526001600160a01b03909116906323b872dd906106f190339030908790600401610d85565b6020604051808303816000875af1158015610710573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107349190610da9565b506002546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061076990339030908690600401610d85565b6020604051808303816000875af1158015610788573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ac9190610da9565b5060408051838152602081018390527f38f8a0c92f4c5b0b6877f878cb4c0c8d348a47b76d716c8e78f425043df9515b91015b60405180910390a15050565b6107f3610c0d565b6001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa15801561083b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085f9190610d1d565b82111580156108d957506002546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156108b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d59190610d1d565b8111155b6109155760405162461bcd60e51b815260206004820152600d60248201526c4c6f77206c697175696469747960981b60448201526064016101e5565b60015460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610966573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098a9190610da9565b5060025460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af11580156109dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a009190610da9565b5060408051838152602081018390527f6f0f96292ae0038c04f9b6bab30f185d9ca02c471d0983f563f2a4f674aef13791016107df565b60008111610a7c5760405162461bcd60e51b81526020600482015260126024820152710416d6f756e74206d757374206265203e20360741b60448201526064016101e5565b6001546040516370a0823160e01b8152306004820152600091610b1f9184916001600160a01b0316906370a0823190602401602060405180830381865afa158015610acb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aef9190610d1d565b6002546040516370a0823160e01b81523060048201526001600160a01b03909116906370a08231906024016104ee565b6001546040516323b872dd60e01b81529192506001600160a01b0316906323b872dd90610b5490339030908790600401610d85565b6020604051808303816000875af1158015610b73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b979190610da9565b5060025460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016105e0565b610bd7610c0d565b6001600160a01b038116610c0157604051631e4fbdf760e01b8152600060048201526024016101e5565b610c0a81610c3a565b50565b6000546001600160a01b031633146104085760405163118cdaa760e01b81523360048201526024016101e5565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000610c968484610dcb565b610ca08386610d4c565b610caa9190610d63565b949350505050565b600060208284031215610cc457600080fd5b81356001600160a01b0381168114610cdb57600080fd5b9392505050565b600060208284031215610cf457600080fd5b5035919050565b60008060408385031215610d0e57600080fd5b50508035926020909101359150565b600060208284031215610d2f57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176103f0576103f0610d36565b600082610d8057634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208284031215610dbb57600080fd5b81518015158114610cdb57600080fd5b808201808211156103f0576103f0610d3656fea2646970667358221220cf567c102429ec40c747d07e6b52fd8c07ee94b48a25a7139c411a52df30daf664736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80638da5cb5b116100665780638da5cb5b146101245780639cd441da146101355780639d7de6b314610148578063e4f1f70a1461015b578063f2fde38b1461016e57600080fd5b80630fc63d10146100a357806341976e09146100d35780635f64b55b146100f4578063715018a6146101075780638014a7aa14610111575b600080fd5b6001546100b6906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100e66100e1366004610cb2565b610181565b6040519081526020016100ca565b6002546100b6906001600160a01b031681565b61010f6103f6565b005b61010f61011f366004610ce2565b61040a565b6000546001600160a01b03166100b6565b61010f610143366004610cfb565b610663565b61010f610156366004610cfb565b6107eb565b61010f610169366004610ce2565b610a37565b61010f61017c366004610cb2565b610bcf565b6001546000906001600160a01b03838116911614806101ad57506002546001600160a01b038381169116145b6101ee5760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b2103a37b5b2b760991b60448201526064015b60405180910390fd5b6001546001600160a01b038381169116146102fc576002546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa15801561024b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026f9190610d1d565b6001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156102b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102db9190610d1d565b6102ed90670de0b6b3a7640000610d4c565b6102f79190610d63565b6103f0565b6001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610344573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103689190610d1d565b6002546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156103b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d49190610d1d565b6103e690670de0b6b3a7640000610d4c565b6103f09190610d63565b92915050565b6103fe610c0d565b6104086000610c3a565b565b6000811161044f5760405162461bcd60e51b81526020600482015260126024820152710416d6f756e74206d757374206265203e20360741b60448201526064016101e5565b6002546040516370a0823160e01b81523060048201526000916105349184916001600160a01b0316906370a0823190602401602060405180830381865afa15801561049e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c29190610d1d565b6001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a08231906024015b602060405180830381865afa15801561050b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052f9190610d1d565b610c8a565b6002546040516323b872dd60e01b81529192506001600160a01b0316906323b872dd9061056990339030908790600401610d85565b6020604051808303816000875af1158015610588573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ac9190610da9565b5060015460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044015b6020604051808303816000875af11580156105ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106239190610da9565b50604080518381526020810183905233917fd5a1cd88ddd329cc1ddf861a21708efa9ef3136b88e1420c21f91ef6f95ad024910160405180910390a25050565b61066b610c0d565b60008211801561067b5750600081115b6106bd5760405162461bcd60e51b81526020600482015260136024820152720416d6f756e7473206d757374206265203e203606c1b60448201526064016101e5565b6001546040516323b872dd60e01b81526001600160a01b03909116906323b872dd906106f190339030908790600401610d85565b6020604051808303816000875af1158015610710573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107349190610da9565b506002546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061076990339030908690600401610d85565b6020604051808303816000875af1158015610788573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ac9190610da9565b5060408051838152602081018390527f38f8a0c92f4c5b0b6877f878cb4c0c8d348a47b76d716c8e78f425043df9515b91015b60405180910390a15050565b6107f3610c0d565b6001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa15801561083b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085f9190610d1d565b82111580156108d957506002546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156108b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d59190610d1d565b8111155b6109155760405162461bcd60e51b815260206004820152600d60248201526c4c6f77206c697175696469747960981b60448201526064016101e5565b60015460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610966573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098a9190610da9565b5060025460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af11580156109dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a009190610da9565b5060408051838152602081018390527f6f0f96292ae0038c04f9b6bab30f185d9ca02c471d0983f563f2a4f674aef13791016107df565b60008111610a7c5760405162461bcd60e51b81526020600482015260126024820152710416d6f756e74206d757374206265203e20360741b60448201526064016101e5565b6001546040516370a0823160e01b8152306004820152600091610b1f9184916001600160a01b0316906370a0823190602401602060405180830381865afa158015610acb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aef9190610d1d565b6002546040516370a0823160e01b81523060048201526001600160a01b03909116906370a08231906024016104ee565b6001546040516323b872dd60e01b81529192506001600160a01b0316906323b872dd90610b5490339030908790600401610d85565b6020604051808303816000875af1158015610b73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b979190610da9565b5060025460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016105e0565b610bd7610c0d565b6001600160a01b038116610c0157604051631e4fbdf760e01b8152600060048201526024016101e5565b610c0a81610c3a565b50565b6000546001600160a01b031633146104085760405163118cdaa760e01b81523360048201526024016101e5565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000610c968484610dcb565b610ca08386610d4c565b610caa9190610d63565b949350505050565b600060208284031215610cc457600080fd5b81356001600160a01b0381168114610cdb57600080fd5b9392505050565b600060208284031215610cf457600080fd5b5035919050565b60008060408385031215610d0e57600080fd5b50508035926020909101359150565b600060208284031215610d2f57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176103f0576103f0610d36565b600082610d8057634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208284031215610dbb57600080fd5b81518015158114610cdb57600080fd5b808201808211156103f0576103f0610d3656fea2646970667358221220cf567c102429ec40c747d07e6b52fd8c07ee94b48a25a7139c411a52df30daf664736f6c63430008140033",
  "devdoc": {
    "author": "[Gus]",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "events": {
      "TokenSwapped(address,uint256,uint256)": {
        "params": {
          "user": "/// @param amountIn /// @param amountOut"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addLiquidity(uint256,uint256)": {
        "details": "Only callable by the owner",
        "params": {
          "amountA": "/// @param amountB"
        }
      },
      "constructor": {
        "params": {
          "_tokenA": "Address of token A",
          "_tokenB": "Address of token B"
        }
      },
      "getPrice(address)": {
        "params": {
          "_token": "Address of the token to price"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeLiquidity(uint256,uint256)": {
        "params": {
          "amountA": "/// @param amountB"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "swapAforB(uint256)": {
        "params": {
          "amountAIn": "The amount of token A to swap"
        }
      },
      "swapBforA(uint256)": {
        "params": {
          "amountBIn": "The amount of token B to swap"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Simple Decentralized Exchange (DEX)",
    "version": 1
  },
  "userdoc": {
    "events": {
      "LiquidityAdded(uint256,uint256)": {
        "notice": "Emitted when liquidity is added"
      },
      "LiquidityRemoved(uint256,uint256)": {
        "notice": "Emitted when liquidity is removed"
      },
      "TokenSwapped(address,uint256,uint256)": {
        "notice": "Emitted when a token swap occurs"
      }
    },
    "kind": "user",
    "methods": {
      "addLiquidity(uint256,uint256)": {
        "notice": "Adds liquidity to the pool"
      },
      "constructor": {
        "notice": "Initializes the DEX with two tokens"
      },
      "getPrice(address)": {
        "notice": "Gets the price of a token relative to the other"
      },
      "removeLiquidity(uint256,uint256)": {
        "notice": "Removes liquidity from the pool Only callable by the owner"
      },
      "swapAforB(uint256)": {
        "notice": "Swaps token A for token B"
      },
      "swapBforA(uint256)": {
        "notice": "Swaps token B for token A"
      },
      "tokenA()": {
        "notice": "Token A in the liquidity pool"
      },
      "tokenB()": {
        "notice": "Token B in the liquidity pool"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/SimpleDex.sol:SimpleDEX",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 266,
        "contract": "contracts/SimpleDex.sol:SimpleDEX",
        "label": "tokenA",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)225"
      },
      {
        "astId": 270,
        "contract": "contracts/SimpleDex.sol:SimpleDEX",
        "label": "tokenB",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)225"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)225": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      }
    }
  }
}